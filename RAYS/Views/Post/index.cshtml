@model IEnumerable<RAYS.ViewModels.PostViewModel>

<div class="flex justify-center p-1 mt-16 510px:mt-0 font-light text-xs sm:text-sm">

    <!-- Create new post form -->
    <form asp-action="Create" method="post" enctype="multipart/form-data"
        class="bg-emerald-200 rounded-lg min-w-full py-4 px-3 md:px-5 mt-2 shadow-md">

        <!-- Display TempData error message -->
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="bg-red-500 text-white p-1 shadow-lg mb-2 rounded-lg">
                <p class="font-semibold text-base">@TempData["ErrorMessage"]</p>
            </div>
        }

        <div class="flex items-center mb-2">
            @{
                var identity = User.Identity;
                var userNameInitial = string.Empty;

                if (identity != null && identity.IsAuthenticated && !string.IsNullOrEmpty(identity.Name))
                {
                    userNameInitial = identity.Name[0].ToString().ToUpper();
                }
            }
            <span
                class="flex items-center justify-center w-10 h-10 rounded-full mr-4 bg-white text-lg font-medium text-black">@userNameInitial</span>
            <textarea name="Content" placeholder="What's happening?"
                class="post-textarea w-full p-4 bg-white text-black rounded-lg resize-none h-28 focus:outline-none focus:ring-2 focus:ring-gray-300"></textarea>
        </div>

        <div class="flex items-center justify-between pt-1">

            <div class="flex space-x-0 pl-0 420px:space-x-2 sm:pl-5">
                <button type="button" id="uploadImageButton"
                    class="flex items-center bg-white text-black border border-gray-300 rounded-lg px-1 sm:px-2 py-1">

                    <span class="material-icons mr-1">photo</span> Media
                </button>
                <button type="button" id="addVideoUrlButton"
                    class="flex items-center bg-white text-black border border-gray-300 rounded-lg px-1 sm:px-2 py-1">
                    <span class="material-icons mr-1">link</span> Hyperlink
                </button>
                <button type="button" id="addLocationButton"
                    class="flex items-center bg-white text-black border border-gray-300 rounded-lg px-1 sm:px-2 py-1">
                    <span class="material-icons mr-1">location_on</span> Location
                </button>
            </div>

            <button type="submit"
                class="flex items-center bg-blue-600 text-white px-1 420px:px-3 py-1 text-sm 420px:text-base font-medium rounded-lg hover:bg-blue-500 transition-colors duration-300">
                Post <span class="material-icons ml-2 text-lg sm:text-xl">send</span>
            </button>

        </div>

        <!-- Image Preview Section -->
        <div id="imageUploadPreview" class="relative hidden mt-2">
            <img id="imagePreview" class="w-full max-h-60 object-contain rounded-lg" alt="Image Preview" />
            <button type="button" id="removeImageButton"
                class="absolute top-2 right-2 bg-red-500 text-white rounded-full px-2 py-1">X</button>
        </div>

        <!-- Hidden input fields for Image, Video URL, and Location -->
        <div id="imageUpload" class="hidden mt-2">
            <input type="file" name="Image" id="imageInput"
                class="w-full p-3 bg-white text-black rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-300" />
        </div>

        <div id="videoUrlInput" class="hidden mt-2">
            <input type="text" name="VideoUrl" placeholder="Add a video URL"
                class="w-full p-3 bg-white text-black rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-300" />
        </div>

        <div id="locationInput" class="hidden mt-2">
            <input type="text" name="Location" placeholder="Enter a location"
                class="w-full p-3 bg-white text-black rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-300" />
        </div>
    </form>
</div>

@foreach (var post in Model)
{
    <div class="bg-emerald-200 shadow-md rounded-lg py-4 px-3 md:px-5 mt-6 mx-auto text-sm md:text-base lg:text-lg">
        <!-- Post metadata -->
        <div class="mb-2">
            <!--Username as clickable link-->
            <form action="@Url.Action("Profile", "Profile")" method="get" class="inline">
                <input type="hidden" name="userId" value="@post.UserId" /> <!-- Endret til å være relatert til post -->
                <button type="submit"
                    class="text-2xl font-medium font-general text-black bg-transparent border-none hover:underline cursor-pointer">
                    @post.Username <!-- Endret til å være relatert til post -->
                </button>
            </form>

            <small class="text-gray-500 block">@post.CreatedAt.ToString("f")</small>
            @if (!string.IsNullOrEmpty(post.Location))
            {
                <small class="text-gray-500 block">Location: @post.Location</small>
            }
        </div>

        <!-- Display error message specific to content if this is the post being updated -->
        @if (TempData["ErrorPostId"] is int errorPostId && errorPostId == post.Id)
        {
            <div class="bg-red-500 text-white p-2 mb-1 rounded-lg">
                @TempData["ContentErrorMessage"]
            </div>
        }

        <!-- Post content -->
        <p id="content-@post.Id" class="text-gray-800 mt-2">@post.Content</p>

        <!-- Edit Form -->
        <form asp-action="Update" method="post" id="edit-form-@post.Id" style="display: none;" class="mt-2">
            <input type="hidden" name="Id" value="@post.Id" />
            <input type="hidden" name="UserId" value="@post.UserId" />



            <!-- Editable content -->
            <textarea name="Content" class="w-full p-2 border rounded-lg">@post.Content</textarea>

            <!-- Optional fields for editing other data -->
            <input type="text" name="VideoUrl" value="@post.VideoUrl" placeholder="Video URL"
                class="w-full p-2 border rounded-lg mt-3" />
            <input type="text" name="Location" value="@post.Location" placeholder="Location"
                class="w-full p-2 border rounded-lg mt-3" />

            <!-- Action buttons -->
            <div class="flex justify-end space-x-4 mt-4">
                <button type="submit" class="bg-blue-600 text-white rounded-lg px-5 py-2">Save</button>
                <button type="button" onclick="toggleEdit(@post.Id)"
                    class="bg-gray-300 rounded-lg px-5 py-2">Cancel</button>
            </div>
        </form>

        <!-- Display other post data (image/video/like actions) -->
        @if (!string.IsNullOrEmpty(post.ImagePath))
        {
            <img src="@post.ImagePath" alt="Post image" class="w-full max-h-96 object-contain rounded-lg mt-4 mb-4" />
        }
        @if (!string.IsNullOrEmpty(post.VideoUrl))
        {
            <a href="@post.VideoUrl" target="_blank" class="text-blue-600 hover:underline">@post.VideoUrl</a>
        }
        <!--Like Count-->
        <p class="text-red-700-">
            @post.LikeCount ❤
        </p>

        <!-- Like/Comment/Edit/Delete actions -->
        <div class="flex justify-center items-center space-x-2 420px:space-x-6 sm:space-x-10 970px:space-x-12 mt-4"
            id="post-@post.Id">
            <form asp-action="@(post.IsLikedByUser ? "Unlike" : "Like")" method="post">
                <input type="hidden" name="postId" value="@post.Id" />
                <button type="submit" class="flex items-center space-x-1 text-blue-600 hover:text-blue-800">
                    <span class="material-icons">
                        @(post.IsLikedByUser ? "thumb_down" : "thumb_up")
                    </span>
                    <span>@(post.IsLikedByUser ? "Unlike" : "Like")</span>
                </button>
            </form>


            <form asp-controller="Comment" asp-action="Index" asp-route-postId="@post.Id" method="get" class="inline">
                <button type="submit" class="flex items-center space-x-1 text-gray-600 hover:text-gray-800">
                    <span class="material-icons">comment</span>
                    <span>Comment</span>
                </button>
            </form>

            <!-- Show edit and delete options for the post owner -->
            @if (post.UserId == int.Parse(User.FindFirst("UserId")?.Value ?? "0"))
            {
                <button id="edit-button-@post.Id" onclick="toggleEdit(@post.Id)"
                    class="flex items-center space-x-1 text-yellow-600 hover:text-yellow-800">
                    <span class="material-icons">edit</span> <span>Edit</span>
                </button>
                <form asp-action="Delete" method="post">
                    <input type="hidden" name="id" value="@post.Id" />
                    <button type="submit" class="flex items-center space-x-1 text-red-600 hover:text-red-800">
                        <span class="material-icons">delete</span> <span>Delete</span>
                    </button>
                </form>
            }
        </div>
    </div>
}

<!-- JavaScript for å håndtere Like/Unlike og lagre post-ID -->
<script>
    // Lagre postId til localStorage når en bruker klikker på "Like" eller "Unlike"-knappen
    document.querySelectorAll('form[method="post"]').forEach(function (form) {
        form.addEventListener('submit', function (event) {
            const postId = event.target.querySelector('input[name="postId"]').value;
            console.log('Lagrer postId til localStorage: ', postId);

            // Lagre postId og flagget "isPostLiked" i localStorage
            localStorage.setItem('likedPostId', postId);
            localStorage.setItem('isPostLiked', 'true'); // Angi at en post har blitt likt/ulikt
        });
    });

    // Når siden lastes, hent lagret postId fra localStorage og sjekk om brukeren har trykket på Like/Unlike
    window.addEventListener('load', function () {
        const likedPostId = localStorage.getItem('likedPostId');
        const isPostLiked = localStorage.getItem('isPostLiked'); // Sjekk om brukeren har likt/uliket en post
        console.log('Henter lagret postId fra localStorage: ', likedPostId);
        console.log('Er post likt/uliket? ', isPostLiked);

        if (isPostLiked === 'true' && likedPostId) {
            // Finn elementet som har den spesifikke post-ID-en
            const postElement = document.getElementById('post-' + likedPostId);

            if (postElement) {
                console.log('Scroller til posten med ID: ', likedPostId);
                postElement.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center',  // Får elementet til å være nær toppen av skjermen
                    inline: 'nearest'
                });

                // Alternativ for litt mer plass til toppen (valgfritt):
                window.scrollBy(0, -150); // Juster med 50px for å unngå at posten er for nær toppen
            } else {
                console.log('Fant ikke posten med ID: ', likedPostId);
            }

            // Etter scrollen, fjern flagget så vi ikke scroller neste gang siden lastes
            localStorage.removeItem('isPostLiked'); // Fjerne flagget etter at scrollen er gjort
        }
    });




</script>


<!-- JavaScript function to toggle the edit form -->
<script>
    function toggleEdit(postId) {
        var content = document.getElementById("content-" + postId);
        var editForm = document.getElementById("edit-form-" + postId);
        var editButton = document.getElementById("edit-button-" + postId);

        // Toggle the visibility of the content and edit form
        if (editForm.style.display === "none") {
            content.style.display = "none";  // Hide post content
            editForm.style.display = "block";  // Show edit form
            editButton.style.display = "none"; // Hide edit button
        } else {
            content.style.display = "block";  // Show post content
            editForm.style.display = "none";   // Hide edit form
            editButton.style.display = "inline"; // Show edit button again
        }
    }

    // JavaScript for handling the buttons
    document.getElementById('uploadImageButton').addEventListener('click', function () {
        // Toggle visibility of the image upload input field
        document.getElementById('imageUpload').classList.toggle('hidden');
    });

    document.getElementById('addVideoUrlButton').addEventListener('click', function () {
        // Toggle visibility of the video URL input field
        document.getElementById('videoUrlInput').classList.toggle('hidden');
    });

    document.getElementById('addLocationButton').addEventListener('click', function () {
        // Toggle visibility of the location input field
        document.getElementById('locationInput').classList.toggle('hidden');
    });

    // Handle image selection and preview
    document.getElementById('imageInput').addEventListener('change', function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                document.getElementById('imagePreview').src = e.target.result; // Set the image preview source
                document.getElementById('imageUploadPreview').classList.remove('hidden'); // Show the preview section
            };
            reader.readAsDataURL(file);
        }
    });

    // Handle image removal
    document.getElementById('removeImageButton').addEventListener('click', function () {
        document.getElementById('imageInput').value = ''; // Clear the file input
        document.getElementById('imageUploadPreview').classList.add('hidden'); // Hide the preview section
        document.getElementById('imagePreview').src = ''; // Clear the preview image source
    });
</script>
